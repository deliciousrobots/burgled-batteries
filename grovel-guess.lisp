;; For platforms where compiling a grovel file is too difficult (Windows), just
;; guess at appropriate values.
(cl:in-package #:python.cffi)

(cffi:defctype ssize-t (or #+cffi-features:x86 :int32
                           #+cffi-features:x86-64 :int64
                           (error "Unable to guess ssize-t.")))
(cl:defconstant size-of-ssize-t (cffi:foreign-type-size 'ssize-t))
(cffi:defctype size-t (or #+cffi-features:x86 :uint32
                          #+cffi-features:x86-64 :uint64
                          (error "Unable to guess size-t.")))
(cl:defconstant size-of-size-t (cffi:foreign-type-size 'size-t))

(cffi:defcenum (evaluation-context)
  (:expression 258)
  (:statement  256)
  (:file       257))
(cl:defconstant +eval-input+ 258)
(cl:defconstant +file-input+ 257)
(cl:defconstant +single-input+ 256)

(cffi:defcenum (trace-what)
  (:call        0)
  (:exception   1)
  (:line        2)
  (:return      3)
  (:c-call      4)
  (:c-exception 5)
  (:c-return    6))
(cl:defconstant +trace-call+ 0)
(cl:defconstant +trace-exception+ 1)
(cl:defconstant +trace-line+ 2)
(cl:defconstant +trace-return+ 3)
(cl:defconstant +trace-c-call+ 4)
(cl:defconstant +trace-c-exception+ 5)
(cl:defconstant +trace-c-return+ 6)

(cffi:defcenum (comparison-operator)
  (:<  0)
  (:<= 1)
  (:=  2)
  (:/= 3)
  (:>  4)
  (:>= 5))
(cl:defconstant +lt+ 0)
(cl:defconstant +le+ 1)
(cl:defconstant +eq+ 2)
(cl:defconstant +ne+ 3)
(cl:defconstant +gt+ 4)
(cl:defconstant +ge+ 5)

(cffi:defbitfield (type-flags :long)
  (:have-get-char-buffer     #x00000001)
  (:have-sequence-in         #x00000002)
  (:gc                       #x00000000)
  (:have-in-place-ops        #x00000008)
  (:check-types              #x00000010)
  (:have-rich-compare        #x00000020)
  (:have-weak-refs           #x00000040)
  (:have-iter                #x00000080)
  (:have-class               #x00000100)
  (:heap-type                #x00000200)
  (:base-type                #x00000400)
  (:ready                    #x00001000)
  (:readying                 #x00002000)
  (:have-gc                  #x00004000)
  (:have-stackless-extension #x00000000) ; FIXME: how to detect stackless Python?
  (:have-index               #x00020000)
  (:have-version-tag         #x00040000)
  (:valid-version-tag        #x00080000)
  (:is-abstract              #x00100000)
  (:have-new-buffer          #x00200000)
  (:int-subclass             #x00800000)
  (:long-subclass            #x01000000)
  (:list-subclass            #x02000000)
  (:tuple-subclass           #x04000000)
  (:string-subclass          #x08000000)
  (:unicode-subclass         #x10000000)
  (:dict-subclass            #x20000000)
  (:base-exception-subclass  #x40000000)
  (:type-subclass            #x80000000)
  (:default-external         #x000201eb)
  (:default-core             #x000601eb)
  (:default                  #x000201eb))
(cl:defconstant +tpflags.have-get-char-buffer+ 1)
(cl:defconstant +tpflags.have-sequence-in+ 2)
(cl:defconstant +tpflags.gc+ 0)
(cl:defconstant +tpflags.have-inplaceops+ 8)
(cl:defconstant +tpflags.checktypes+ 16)
(cl:defconstant +tpflags.have-richcompare+ 32)
(cl:defconstant +tpflags.have-weakrefs+ 64)
(cl:defconstant +tpflags.have-iter+ 128)
(cl:defconstant +tpflags.have-class+ 256)
(cl:defconstant +tpflags.heaptype+ 512)
(cl:defconstant +tpflags.basetype+ 1024)
(cl:defconstant +tpflags.ready+ 4096)
(cl:defconstant +tpflags.readying+ 8192)
(cl:defconstant +tpflags.have-gc+ 16384)
(cl:defconstant +tpflags.have-stackless-extension+ 0)
(cl:defconstant +tpflags.have-index+ 131072)
(cl:defconstant +tpflags.have-version-tag+ 262144)
(cl:defconstant +tpflags.valid-version-tag+ 524288)
(cl:defconstant +tpflags.is-abstract+ 1048576)
(cl:defconstant +tpflags.have-newbuffer+ 2097152)
(cl:defconstant +tpflags.int-subclass+ 8388608)
(cl:defconstant +tpflags.long-subclass+ 16777216)
(cl:defconstant +tpflags.list-subclass+ 33554432)
(cl:defconstant +tpflags.tuple-subclass+ 67108864)
(cl:defconstant +tpflags.string-subclass+ 134217728)
(cl:defconstant +tpflags.unicode-subclass+ 268435456)
(cl:defconstant +tpflags.dict-subclass+ 536870912)
(cl:defconstant +tpflags.base-exc-subclass+ 1073741824)
(cl:defconstant +tpflags.type-subclass+ -2147483648)
(cl:defconstant +tpflags.default-external+ 131563)
(cl:defconstant +tpflags.default-core+ 393707)
(cl:defconstant +tpflags.default+ 131563)

(cffi:defbitfield (method-convention-flags)
  (:positional-arguments #x0001)
  (:keyword-arguments    #x0002)
  (:mixed-arguments      #x0003)
  (:no-arguments         #x0004)
  (:object-method        #x0008)
  (:old-args             #x0000)
  (:class-binding        #x0010)
  (:static-binding       #x0020)
  (:coexist              #x0040)
  (:replace-existing     #x0040))
(cl:defconstant +meth.varargs+ 1)
(cl:defconstant +meth.keywords+ 2)
(cl:defconstant +meth.noargs+ 4)
(cl:defconstant +meth.o+ 8)
(cl:defconstant +meth.oldargs+ 0)
(cl:defconstant +meth.class+ 16)
(cl:defconstant +meth.static+ 32)
(cl:defconstant +meth.coexist+ 64)

(cffi:defcenum (member-type)
  (:short               0)
  (:int                 1)
  (:long                2)
  (:float               3)
  (:double              4)
  (:string              5)
  (:object              6)
  (:object-ex          16)
  (:char                7)
  (:byte                8)
  (:unsigned-byte       9)
  (:unsigned-int       11)
  (:unsigned-short     10)
  (:unsigned-long      12)
  (:boolean            14)
  (:long-long          17)
  (:unsigned-long-long 18)
  (:ssize-t            19))
(cl:defconstant +type.short+ 0)
(cl:defconstant +type.int+ 1)
(cl:defconstant +type.long+ 2)
(cl:defconstant +type.float+ 3)
(cl:defconstant +type.double+ 4)
(cl:defconstant +type.string+ 5)
(cl:defconstant +type.object+ 6)
(cl:defconstant +type.object-ex+ 16)
(cl:defconstant +type.char+ 7)
(cl:defconstant +type.byte+ 8)
(cl:defconstant +type.ubyte+ 9)
(cl:defconstant +type.uint+ 11)
(cl:defconstant +type.ushort+ 10)
(cl:defconstant +type.ulong+ 12)
(cl:defconstant +type.bool+ 14)
(cl:defconstant +type.longlong+ 17)
(cl:defconstant +type.ulonglong+ 18)
(cl:defconstant +type.ssize-t+ 19)

(cl:defconstant +api-version+ 1013)
